services:
  zookeeper_1:
    container_name: zookeeper_1
    build:
      context: .
      dockerfile: Dockerfile.zookeeper
      args:
        ZOO_MY_ID: 1
    ports:
      - 2181:2181 # ZooKeeper
      - 8011:80   # AdminServer http://localhost:8011/commands
    volumes:
      - data_zookeeper_1:/data/zookeeper
      - kafka_logs-zookeeper_1:/kafka/logs
  zookeeper_2:
    container_name: zookeeper_2
    build:
      context: .
      dockerfile: Dockerfile.zookeeper
      args:
        ZOO_MY_ID: 2
    ports:
      - 2182:2181 # ZooKeeper
      - 8012:80   # AdminServer http://localhost:8012/commands
    volumes:
      - data_zookeeper_2:/data/zookeeper
      - kafka_logs-zookeeper_2:/kafka/logs
  zookeeper_3:
    container_name: zookeeper_3
    build:
      context: .
      dockerfile: Dockerfile.zookeeper
      args:
        ZOO_MY_ID: 3
    ports:
      - 2183:2181 # ZooKeeper
      - 8013:80   # AdminServer http://localhost:8013/commands
    volumes:
      - data_zookeeper_3:/data/zookeeper
      - kafka_logs-zookeeper_3:/kafka/logs
  zoonavigator_api:
    container_name: zoonavigator_api
    image: elkozmon/zoonavigator-api:latest
    environment:
      API_HTTP_PORT: 9001
    depends_on:
      - zookeeper_1
      - zookeeper_2
      - zookeeper_3
    restart: always
  zoonavigator_web:
    container_name: zoonavigator_web
    image: elkozmon/zoonavigator-web:latest
    environment:
      API_HOST: zoonavigator_api
      API_PORT: 9001
      WEB_HTTP_PORT: 8001
    ports:
      - 8021:8001 # ZooNavigator UI http://localhost:8021/
      # connection string: "zookeeper_1:2181,zookeeper_2:2181,zookeeper_3:2181"
    depends_on:
      - zoonavigator_api
    restart: always
  broker_1:
    container_name: broker_1
    build:
      context: .
      dockerfile: Dockerfile.kafka
      args:
        KAFKA_BROKER_ID: 1
        KAFKA_ADVERTISED_HOST_NAME: broker_1
    ports:
      - 9992:9092 # Kafka broker
    volumes:
      - data_kafka_1:/data/kafka
      - kafka_logs-broker_1:/kafka/logs
    depends_on:
      - zookeeper_1
      - zookeeper_2
      - zookeeper_3
  broker_2:
    container_name: broker_2
    build:
      context: .
      dockerfile: Dockerfile.kafka
      args:
        KAFKA_BROKER_ID: 2
        KAFKA_ADVERTISED_HOST_NAME: broker_2
    ports:
      - 9993:9092 # Kafka broker
    volumes:
      - data_kafka_2:/data/kafka
      - kafka_logs-broker_2:/kafka/logs
    depends_on:
      - zookeeper_1
      - zookeeper_2
      - zookeeper_3
  broker_3:
    container_name: broker_3
    build:
      context: .
      dockerfile: Dockerfile.kafka
      args:
        KAFKA_BROKER_ID: 3
        KAFKA_ADVERTISED_HOST_NAME: broker_3
    ports:
      - 9994:9092 # Kafka broker
    volumes:
      - data_kafka_3:/data/kafka
      - kafka_logs-broker_3:/kafka/logs
    depends_on:
      - zookeeper_1
      - zookeeper_2
      - zookeeper_3
  cmak:
    container_name: cmak
    image: vimagick/cmak
    environment:
      - ZK_HOSTS=zookeeper_1:2181,zookeeper_2:2181,zookeeper_3:2181
      - KAFKA_MANAGER_AUTH_ENABLED=true
      - KAFKA_MANAGER_USERNAME=admin
      - KAFKA_MANAGER_PASSWORD=admin
    ports:
      - 8822:9000 # http://localhost:8822/
    depends_on:
      - broker_1
      - broker_2
      - broker_3
    healthcheck:
      test: curl -f http://cmak:9000/api/health || exit 1
    restart: unless-stopped
  registry_1:
    container_name: registry_1
    build:
      context: .
      dockerfile: Dockerfile.schema-registry
      args:
        REGISTRY_HOST_NAME: registry_1
        BOOTSTRAP_SERVERS: PLAINTEXT://broker_1:9092,PLAINTEXT://broker_2:9092,PLAINTEXT://broker_3:9092
    environment:
      LOG_DIR: /data/logs
    ports:
      - 8881:8081
    volumes:
      - data-logs_registry_1:/data/logs
  registry_2:
    container_name: registry_2
    build:
      context: .
      dockerfile: Dockerfile.schema-registry
      args:
        REGISTRY_HOST_NAME: registry_2
        BOOTSTRAP_SERVERS: PLAINTEXT://broker_1:9092,PLAINTEXT://broker_2:9092,PLAINTEXT://broker_3:9092      
    environment:
      LOG_DIR: /data/logs
    ports:
      - 8882:8081
    volumes:
      - data-logs_registry_2:/data/logs
  rest_proxy_1:
    container_name: rest_proxy_1
    build:
      context: .
      dockerfile: Dockerfile.rest-proxy
      args:
        REST_PROXY_ID: 1
        BOOTSTRAP_SERVERS: PLAINTEXT://broker_1:9092,PLAINTEXT://broker_2:9092,PLAINTEXT://broker_3:9092
        REGISTRY_URL: http://registry_1:8081
    environment:
      LOG_DIR: /data/logs
    ports:
      - 8885:8082
    volumes:
      - data-logs_rest_proxy_1:/data/logs
  rest_proxy_2:
    container_name: rest_proxy_2
    build:
      context: .
      dockerfile: Dockerfile.rest-proxy
      args:
        REST_PROXY_ID: 2
        BOOTSTRAP_SERVERS: PLAINTEXT://broker_1:9092,PLAINTEXT://broker_2:9092,PLAINTEXT://broker_3:9092
        REGISTRY_URL: http://registry_2:8082
    environment:
      LOG_DIR: /data/logs
    ports:
      - 8886:8082
    volumes:
      - data-logs_rest_proxy_2:/data/logs
  kafka-topics-ui:
    container_name: kafka-topics-ui
    image: landoop/kafka-topics-ui
    ports:
      - 8887:8000
    volumes:
      - ./kafka-topics-ui.env.js:/kafka-topics-ui/env.js
  schema-registry-ui:
    container_name: schema-registry-ui
    image: landoop/schema-registry-ui
    ports:
      - 8888:8000
    volumes:
      - ./schema-registry.env.js:/schema-registry-ui/env.js
  connect_1:
    container_name: connect_1
    build:
      context: .
      dockerfile: Dockerfile.connect
      args:
        CONNECT_ID: connect-cluster
        CONNECT_ADVERTISED_HOST_NAME: connect_1
        BOOTSTRAP_SERVERS: PLAINTEXT://broker_1:9092,PLAINTEXT://broker_2:9092,PLAINTEXT://broker_3:9092
    ports:
      - 8889:8084
    volumes:
      - kafka_logs-connect_1:/kafka/logs
      - kafka_connectors-shared:/kafka/connectors
  connect_2:
    container_name: connect_2
    build:
      context: .
      dockerfile: Dockerfile.connect
      args:
        CONNECT_ID: connect-cluster
        CONNECT_ADVERTISED_HOST_NAME: connect_2
        BOOTSTRAP_SERVERS: PLAINTEXT://broker_1:9092,PLAINTEXT://broker_2:9092,PLAINTEXT://broker_3:9092
    ports:
      - 8890:8084
    volumes:
      - kafka_logs-connect_2:/kafka/logs
      - kafka_connectors-shared:/kafka/connectors
  connect_ui:
    container_name: connect_ui
    image: landoop/kafka-connect-ui
    environment:
      - CONNECT_URL=http://connect_1:8084;connect-cluster-worker-1,http://connect_2:8084;connect-cluster-worker-2
    ports:
      - 8891:8000
volumes:
  data_zookeeper_1:
  data_zookeeper_2:
  data_zookeeper_3:
  kafka_logs-zookeeper_1:
  kafka_logs-zookeeper_2:
  kafka_logs-zookeeper_3:
  data_kafka_1:
  data_kafka_2:
  data_kafka_3:
  kafka_logs-broker_1:
  kafka_logs-broker_2:
  kafka_logs-broker_3:
  data-logs_registry_1:
  data-logs_registry_2:
  data-logs_rest_proxy_1:
  data-logs_rest_proxy_2:
  kafka_logs-connect_1:
  kafka_logs-connect_2:
  kafka_connectors-shared: